{
  // Place your sys42 workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "sys42: create new useBaseComponent hook": {
    "scope": "typescriptreact,typescript",
    "prefix": "sys42:useBaseHook",
    "body": [
      "// Define specific props for the component",
      "// If no props are needed, a interface with an empty object can be used",
      "export interface Base${1:${TM_DIRECTORY/^.+[\\/\\\\]+(.*)$/${1:/pascalcase}/}}Props {}",
      "",
      "export function useBase${1}<TTagName extends HTMLElementTagName>(",
      "  { props, forwardedRef }: UseComponentOptions<Base${1}Props, TTagName>,",
      "  interceptor?: UseComponentInterceptor<TTagName>,",
      ") {",
      "  const { ...restProps } = props;",
      "",
      "  const draft = {",
      "    elementProps:",
      "      restProps satisfies EmptyObject as React.ComponentPropsWithoutRef<TTagName>,",
      "  };",
      "",
      "  interceptor?.(draft);",
      "",
      "  return {",
      "    elementProps: draft.elementProps,",
      "    elementRef: forwardedRef,",
      "  };",
      "}",
    ],
    "description": "Create new useBaseComponent hook",
  },
  "sys42: create new useComponent hook": {
    "scope": "typescriptreact,typescript",
    "prefix": "sys42:useComponentHook",
    "body": [
      "import { cn } from \"@sys42/utils\";",
      "",
      "import { Base${1:${TM_DIRECTORY/^.+[\\/\\\\]+(.*)$/${1:/pascalcase}/}}Props, useBase${1} } from \"./useBase${1}\";",
      "",
      "import styles from \"./styles.module.css\";",
      "",
      "export type ${1}Props = Base${1}Props;",
      "",
      "export function use${1}<TTagName extends HTMLElementTagName>(options: UseComponentOptions<${1}Props, TTagName>) {",
      "  return useBase${1}(options, (draft) => {",
      "    draft.elementProps.className = cn(",
      "      draft.elementProps.className,",
      "      styles.${2:${TM_DIRECTORY/^.+[\\/\\\\]+(.*)$/${1:/camelcase}/}},",
      "    );",
      "  });",
      "}",
    ],
    "description": "Create new useComponent hook",
  },
}
